Task 1:

# Function to price a European put option using the Black-Scholes model
def black_scholes_put(S, E, T, rf, sigma):
    d1 = (np.log(S / E) + (rf + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    put_price = E * np.exp(-rf * T) * si.norm.cdf(-d2) - S * si.norm.cdf(-d1)
    return put_price

# Given parameters
S = 15   # Current stock price
E = 18   # Strike price
T = 2    # Time to maturity (years)
rf = 0.05  # Risk-free rate
sigma = 0.3  # Volatility

# Compute Black-Scholes put option price
bs_put_price = black_scholes_put(S, E, T, rf, sigma)

# Output result
print(f"Black-Scholes Put Price: {bs_put_price:.4f}")

# Function to price a European put option using the Binomial Tree method
def binomial_put(S, E, T, rf, sigma, m):
    dt = T / m  # Time step
    u = np.exp(sigma * np.sqrt(dt))  # Up factor
    d = 1 / u  # Down factor
    p = (np.exp(rf * dt) - d) / (u - d)  # Risk-neutral probability

    # Price tree initialization
    price_tree = np.zeros((m + 1, m + 1))

    # Fill the tree with underlying asset prices
    for i in range(m + 1):
        for j in range(i + 1):
            price_tree[j, i] = S * (u ** (i - j)) * (d ** j)

    # Option value tree
    option_tree = np.zeros((m + 1, m + 1))

    # Compute option values at maturity
    for j in range(m + 1):
        option_tree[j, m] = max(E - price_tree[j, m], 0)

    # Backward induction to compute the option price
    for i in range(m - 1, -1, -1):
        for j in range(i + 1):
            option_tree[j, i] = np.exp(-rf * dt) * (p * option_tree[j, i + 1] + (1 - p) * option_tree[j + 1, i + 1])

    return option_tree[0, 0]

# Compute Binomial put option price for m=4
m = 4
binomial_put_price = binomial_put(S, E, T, rf, sigma, m)

# Output result
print(f"Binomial Tree Put Price (m={m}): {binomial_put_price:.4f}")

# Generate values for different time steps
m_values = np.arange(2, 501, 5)  # Time steps from 2 to 500 with step 5
binomial_prices = [binomial_put(S, E, T, rf, sigma, m) for m in m_values]

# Plot convergence
plt.figure(figsize=(10, 5))
plt.plot(m_values, binomial_prices, label="Binomial Tree Price", linestyle="--")
plt.axhline(y=bs_put_price, color="r", linestyle="-", label="Black-Scholes Price")
plt.xlabel("Number of Time Steps (m)")
plt.ylabel("Put Option Price")
plt.title("Convergence of Binomial Tree Price to Black-Scholes Price")
plt.legend()
plt.grid()

# Compute pricing error
pricing_errors = np.array(binomial_prices) - bs_put_price

# Plot pricing error
plt.figure(figsize=(10, 5))
plt.plot(m_values, pricing_errors, label="Pricing Error", color="black")
plt.axhline(y=0, color="r", linestyle="--", label="Zero Error Line")
plt.xlabel("Number of Time Steps (m)")
plt.ylabel("Pricing Error (Binomial - Black-Scholes)")
plt.title("Pricing Error vs. Number of Time Steps")
plt.legend()
plt.grid()
plt.show()

Task 2:
#Find Option Price Sensitivity

# Binomial Option Pricing Model
def binomial_put_price(S0, E, Rf, sigma, T, m): #Defining binomial_put_price to calculate put option price using binomial model with given parameters
    dt = T / m  #To calculate dt as the time per step by dividing total time (T) by steps (m)
    u = np.exp(sigma * np.sqrt(dt)) #To calculate u, the up factor, using volatility (sigma) and time step (dt)
    d = 1 / u  #To calculate d, the down factor, as the inverse of the up factor (u)
    p = (np.exp(Rf * dt) - d) / (u - d)  #To calculate p, the risk-neutral probability, using the risk-free rate, up, and down factors
    disc = np.exp(-Rf * dt) #To calculate the discount factor using the risk-free rate (Rf) and time step (dt)
    
    # Initialize the option value at maturity
    ST = np.maximum(E - S0 * u**np.arange(m+1) * d**(m-np.arange(m+1)), 0) #To calculate the option payoff for each possible stock price at time T
    
    # Backward induction to find the option price
    for i in range(m-1, -1, -1): #Looping backward from m-1 to 0, stepping through each time step
        ST = disc * (p * ST[1:i+2] + (1 - p) * ST[:i+1]) #To calculate the option price at each step by discounting the expected payoff using the risk-neutral probability (p)
    
    return ST[0] #Returns the option price at the initial step (time 0)

# Parameters
E = 100  #Strike price
S0 = 100  #Initial asset price
Rf = 0.04  #Risk-free rate
sigma = 0.20  #Volatility
T = 5  #Time to maturity
m = 200  #Number of periods

#Sensitivity to Risk-Free Rate (Rf)
Rfs = np.arange(0.01, 0.11, 0.001) #Creating an array of risk-free rates from 0.01 to 0.10 in steps of 0.001
prices_Rf = [binomial_put_price(S0, E, r, sigma, T, m) for r in Rfs] #Calculating option prices for each risk-free rate using the binomial model

#Sensitivity to Volatility (Sigma)
sigmas = np.arange(0.01, 0.51, 0.1) #Creating an array of volatility values (sigmas) from 0.01 to 0.5 in steps 0.1
prices_sigma = [binomial_put_price(S0, E, Rf, s, T, m) for s in sigmas] #Calculating option prices for each volatility value using the binomial model

#Sensitivity to Number of Periods (m)
ms = np.arange(5, 1001, 10) #Creating an array of step values (m) from 5 to 1000 steps of 10
prices_m = [binomial_put_price(S0, E, Rf, sigma, T, mm) for mm in ms] #Calculating option prices for each step value (m) using the binomial model

#Sensitivity to Initial Asset Price (S0)
S0s = np.arange(50, 151, 1) #Creating an array of initial stock prices (s0) from 50 to 150 in steps of 1
prices_S0 = [binomial_put_price(s, E, Rf, sigma, T, m) for s in S0s] #Calculating option prices for each initial stock price (S0) using the binomial model

fig = go.Figure()

# Add the trace for the put option price vs. risk-free rate
fig.add_trace(go.Scatter(
    x=Rfs,
    y=prices_Rf,
    mode='lines',
    name='Put Option Price vs Rf',
    line=dict(color='blue', width=2),
    hovertemplate='Rf: %{x:.4f}<br>Price: %{y:.2f}<extra></extra>'
))

# Update the layout
fig.update_layout(
    title='Sensitivity of Put Option Price to Rf',
    xaxis_title='Risk-Free Rate (Rf)',
    yaxis_title='Put Option Price',
    width=800,  # Equivalent to figsize=(10,6) in matplotlib
    height=480,
    template='plotly_white',  # This gives a white background with light grid lines
    hovermode='x unified'
)

# Update x-axis and y-axis to add grid
fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')
fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')

# Show the figure
fig.show()

# Create the figure
fig = go.Figure()

# Add the trace for the put option price vs. sigma
fig.add_trace(go.Scatter(
    x=sigmas,
    y=prices_sigma,
    mode='lines',
    name='Put Option Price vs Sigma',
    line=dict(color='orange', width=2),
    hovertemplate='Sigma: %{x:.4f}<br>Price: %{y:.2f}<extra></extra>'
))

# Update the layout
fig.update_layout(
    title='Sensitivity of Put Option Price to Sigma',
    xaxis_title='Volatility (Sigma)',
    yaxis_title='Put Option Price',
    width=800,  # Equivalent to figsize=(10,6) in matplotlib
    height=480,
    template='plotly_white',  # This gives a white background with light grid lines
    hovermode='x unified'
)

# Update x-axis and y-axis to add grid
fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')
fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')

# Show the figure
fig.show()

# Create the figure
fig = go.Figure()

# Add the trace for the put option price vs. m
fig.add_trace(go.Scatter(
    x=ms,
    y=prices_m,
    mode='lines',
    name='Put Option Price vs m',
    line=dict(color='green', width=2),
    hovertemplate='m: %{x:.0f}<br>Price: %{y:.2f}<extra></extra>'
))

# Update the layout
fig.update_layout(
    title='Sensitivity of Put Option Price to m',
    xaxis_title='Number of Periods (m)',
    yaxis_title='Put Option Price',
    width=800,  # Equivalent to figsize=(10,6) in matplotlib
    height=480,
    template='plotly_white',  # This gives a white background with light grid lines
    hovermode='x unified'
)

# Update x-axis and y-axis to add grid
fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')
fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')

# Show the figure
fig.show()

# Create the figure
fig = go.Figure()

# Add the trace for the put option price vs. S0
fig.add_trace(go.Scatter(
    x=S0s,
    y=prices_S0,
    mode='lines',
    name='Put Option Price vs S0',
    line=dict(color='red', width=2),
    hovertemplate='S0: %{x:.2f}<br>Price: %{y:.2f}<extra></extra>'
))

# Update the layout
fig.update_layout(
    title='Sensitivity of Put Option Price to S0',
    xaxis_title='Initial Asset Price (S0)',
    yaxis_title='Put Option Price',
    width=800,  # Equivalent to figsize=(10,6) in matplotlib
    height=480,
    template='plotly_white',  # This gives a white background with light grid lines
    hovermode='x unified'
)

# Update x-axis and y-axis to add grid
fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')
fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')

# Show the figure
fig.show()

Task 3: Section A)
#Explaing graphically and analyse graphs how the put-call parity works

def binomial_call(S0, E, rf, sigma, T, m):

    # 2a. Compute the time step and up/down factors
    dt = T / m
    u = math.exp(sigma * math.sqrt(dt))  # up factor
    d = 1 / u                            # down factor
    
    # 2b. Compute the risk-neutral probability
    p = (math.exp(rf * dt) - d) / (u - d)
    
    # 2c. Calculate asset prices at maturity and option payoffs
    asset_prices = np.zeros(m + 1)
    option_values = np.zeros(m + 1)
    
    for j in range(m + 1):
        asset_price = S0 * (u ** j) * (d ** (m - j))
        asset_prices[j] = asset_price
        # Call payoff at maturity
        option_values[j] = max(asset_price - E, 0)
    
    # 2d. Backward induction to get option value at time 0
    for i in range(m, 0, -1):
        for j in range(i):
            option_values[j] = math.exp(-rf * dt) * (
                p * option_values[j + 1] + (1 - p) * option_values[j]
            )
    
    return option_values[0]

#Define a function that calculates the present value of the strike
# (this simulates buying a zero-coupon bond that pays K at time T)

def present_value_strike(K, rf, T):

    return K * math.exp(-rf * T)

#Set baseline parameters
S0 = 100       # Current stock price
E = 100        # Strike price
rf = 0.04      # Risk-free interest rate (4%)
sigma = 0.20   # Volatility (20%)
T = 2          # Time to maturity in years
m = 200        # Number of binomial steps

print("Step4 complete: Parameters set.")
print(f"S0={S0}, E={E}, rf={rf}, sigma={sigma}, T={T}, m={m}")

#Compute the binomial call and put prices using the functions
call_price_binomial = binomial_call(S0, E, rf, sigma, T, m)
put_price_binomial = binomial_put(S0, E, rf, sigma, T, m)

print("Step 5 complete: Binomial call and put prices computed.")
print(f"Binomial Call Price = {call_price_binomial:.4f}")
print(f"Binomial Put Price  = {put_price_binomial:.4f}")

#Compute call price using put-call parity:
# C = P + S0 - PV(K)
pv_k = present_value_strike(E, rf, T)
call_price_parity = put_price_binomial + S0 - pv_k

print("Step 6 complete: Calculated call price from put-call parity.")
print(f"Call from Put-Call Parity = {call_price_parity:.4f}")
print(f"Present Value of Strike   = {pv_k:.4f}")

#Print the difference between the binomial call price and the parity-based call price
difference = call_price_binomial - call_price_parity

print("Step 7 complete: Comparison of call prices.")
print(f"Difference (Binomial Call - Parity Call) = {difference:.6f}")

# Generate stock prices around the strike price for visualization
S_range = np.linspace(50, 150, 100)  # Range of stock prices
put_payoffs = np.maximum(E - S_range, 0)  # Put payoff
call_payoffs = np.maximum(S_range - E, 0)  # Call payoff
parity_values = put_payoffs + S_range - present_value_strike(E, rf, T)  # Put-Call Parity Formula

# Create the figure
fig = go.Figure()

# Add traces for Call Option Payoff, Put Option Payoff, and Put-Call Parity
fig.add_trace(go.Scatter(x=S_range, y=call_payoffs, mode='lines', name='Call Option Payoff', 
                         line=dict(dash='dash', color='blue')))
fig.add_trace(go.Scatter(x=S_range, y=put_payoffs, mode='lines', name='Put Option Payoff', 
                         line=dict(dash='dot', color='red')))
fig.add_trace(go.Scatter(x=S_range, y=parity_values, mode='lines', name='Put-Call Parity (P + S - PV(K))', 
                         line=dict(color='green')))

# Add vertical line for Strike Price
fig.add_vline(x=E, line_dash="dash", line_color="gray", annotation_text="Strike Price (K)", 
              annotation_position="top right")

# Update layout
fig.update_layout(
    title='Put-Call Parity: Payoff Comparison',
    xaxis_title='Stock Price at Expiry',
    yaxis_title='Option Payoff',
    width=800,
    height=480,
    legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01),
    hovermode="x unified"
)

# Update axes to include zero
fig.update_xaxes(zeroline=True, zerolinewidth=2, zerolinecolor='LightGray', showgrid=True)
fig.update_yaxes(zeroline=True, zerolinewidth=2, zerolinecolor='LightGray', showgrid=True)

# Show the figure
fig.show()

#Graphically compare Call Price from Binomial vs. Put-Call Parity
plt.figure(figsize=(8, 5))
plt.bar(["Binomial Call Price", "Put-Call Parity Call Price"],
        [call_price_binomial, call_price_parity], color=["blue", "orange"])

plt.ylabel("Call Option Price")
plt.title("Comparison of Call Price from Binomial Model vs. Put-Call Parity")
plt.grid(axis="y")
plt.show()

Section B)
#Write a function that uses the put-call parity to compute the price of a European call option
# Define a function that calculates the present value of the strike price

def present_value_strike(K, rf, T):

    return K * math.exp(-rf * T)

# Define the function to compute call price using put-call parity

def call_price_parity(S0, E, rf, sigma, T, m):

    put_price = binomial_put(S0, E, rf, sigma, T, m)  # Compute put price
    pv_k = present_value_strike(E, rf, T)  # Compute PV of strike price
    call_price = put_price + S0 - pv_k  # Put-Call Parity Formula
    
    return call_price

# Set baseline parameters
S0 = 100       # Current stock price
E = 100        # Strike price
rf = 0.04      # Risk-free interest rate (4%)
sigma = 0.20   # Volatility (20%)
T = 2          # Time to maturity in years
m = 200        # Number of binomial steps

# Compute call prices using both methods
call_price_from_parity = call_price_parity(S0, E, rf, sigma, T, m)
call_price_from_binomial = binomial_call(S0, E, rf, sigma, T, m)

print("Step 4 complete: Call prices computed.")
print(f"Call Price from Put-Call Parity = {call_price_from_parity:.6f}")
print(f"Call Price from Binomial Model  = {call_price_from_binomial:.6f}")

# Verify the accuracy of put-call parity by comparing results
difference = abs(call_price_from_binomial - call_price_from_parity)

print("Step 5 complete: Comparison of call prices.")
print(f"Difference (Binomial Call - Parity Call) = {difference:.6f}")

# Check if the difference is within the 6-decimal tolerance
if difference < 1e-6:
    print(" Put-Call Parity holds! The two prices match up to 6 decimals.")
else:
    print(" Discrepancy detected! Possible numerical errors or arbitrage.")
